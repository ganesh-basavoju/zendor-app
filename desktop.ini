[.ShellClassInfo]
LocalizedResourceName=@zendor-app,0
<h2 className="text-center capitalize  font-bold text-2xl  text-blue-700">
Checkout page
</h2>
<div className="max-w-6xl mx-auto px-4 py-8">
<div className="flex flex-col lg:flex-row gap-6">
  {/* Left Column */}

  <div className="flex-grow space-y-4">
    {/* Login Section */}
    <div
      className="bg-white rounded-lg p-4 cursor-pointer"
      onClick={() => handleStepClick(1)}
    >
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <span className="w-6 h-6 bg-green-500 text-white rounded-full flex items-center justify-center text-sm">
            <Check size={16} />
          </span>
          <h2 className="font-semibold">LOGIN</h2>
        </div>
      </div>
      <div className="mt-2 text-gray-700">
        <p className="p-2">
          Logged as {userName}-{userEmail}
        </p>
        <Button
          onClick={() => {
            router.push("/login");
          }}
          className=" mt-2 p-0 flex items-center cursor-pointer gap-2 text-blue-500"
        >
          Login with Another Account
        </Button>
      </div>
    </div>

    {/* Delivery Address Section */}
    <div
      className={`bg-white rounded-lg p-4 cursor-pointer ${
        activeStep < 2 ? "opacity-50" : ""
      }`}
    >
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center gap-2">
          <span
            className={`w-6 h-6 ${
              selectedAddress != null ? "bg-green-500" : "bg-blue-500"
            } text-white rounded-full flex items-center justify-center text-sm`}
          >
            {selectedAddress != null ? <Check size={16} /> : "2"}
          </span>
          <h2 className="font-semibold">DELIVERY ADDRESS</h2>
        </div>
      </div>

      {activeStep >= 2 && (
        <>
          <p className="pb-1">Select a Address from below</p>
          {addresses.map((address, id) => (
            <div
              key={id}
              onClick={() => {
                handleAddressSelect(id);
                setActiveStep(3);
              }}
              className={`border rounded-lg p-4 mb-4 ${
                selectedAddressIndex === id && "border-blue-400"
              }`}
            >
              <div className="flex items-start gap-3">
                <div>
                  <div className="flex items-center gap-3 mb-1">
                    <h3 className="font-medium">
                      {address.firstName} {address.lastName}
                    </h3>
                    <span className="px-2 py-0.5 bg-gray-100 text-xs rounded">
                      {address.type} - {address.addressType}
                    </span>
                  </div>
                  <p className="text-sm text-gray-600">
                    {address.Street}, {address.City}, {address.State},
                    {address.country} - {address.PinCode}
                  </p>
                  <p className="text-sm text-gray-600 mt-1">
                    Phone: {address.phone}
                  </p>
                  <p className="text-sm text-gray-600 mt-1">
                    Email: {address.email}
                  </p>
                  <p className="text-sm text-gray-600 mt-1">
                    Landmark: {address.Landmark}
                  </p>
                </div>
              </div>
            </div>
          ))}

          <button
            onClick={() => setShowAddressForm(true)}
            className="flex items-center cursor-pointer gap-2 text-blue-500"
          >
            <span>+ Add a new address</span>
          </button>
        </>
      )}
    </div>

    {/* Order Summary Section */}
    <div
      className={`bg-white rounded-lg p-4 cursor-pointer ${
        activeStep < 3 ? "opacity-50" : ""
      }`}
    >
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center gap-2">
          <span
            className={`w-6 h-6 ${
              activeStep > 3 ? "bg-green-500" : "bg-blue-500"
            } text-white rounded-full flex items-center justify-center text-sm`}
          >
            {activeStep >= 3 ? <Check size={16} /> : "3"}
          </span>
          <h2 className="font-semibold">ORDER SUMMARY</h2>
        </div>
      </div>

      {activeStep >= 3 && (
        <>
          <div className="space-y-4">
            {cartItems.map((item) => (
              <div
                key={item._id}
                className="flex flex-col p-3 bg-gray-50 rounded-lg hover:shadow-md transition-all duration-300"
              >
                <div className="flex gap-4">
                  <div className="relative w-24 h-24 rounded-md overflow-hidden">
                    <Image
                      src={
                        item.productType === "Wallpaper"
                          ? item.productId?.images[0].pic
                          : item.productId?.images
                      }
                      alt={item.productId?.name}
                      fill
                      className="object-cover"
                    />
                  </div>

                  <div className="flex-grow flex justify-between items-start">
                    <div className="space-y-1">
                      <h3 className="text-lg font-medium text-gray-900">
                        {item.productId?.name}
                      </h3>
                      <p className="text-gray-600 text-sm">
                        {item.productType} -{" "}
                        {item.isSample ? "Sample" : "Full Product"}
                      </p>
                      <button
                        onClick={() =>
                          removeItem(item.productId, item.isSample)
                        }
                        className="text-red-500 cursor-pointer hover:text-red-700 text-sm font-medium transition-colors"
                      >
                        Remove
                      </button>
                    </div>

                    <div className="text-left">
                      <p className="text-base font-semibold">
                        ₹
                        {Math.ceil(item.totalPrice).toLocaleString(
                          "en-IN"
                        )}
                      </p>

                      {item.isSample ? (
                        <span className=" py-1 font-medium text-sm">
                          Qty:{item.quantity}
                        </span>
                      ) : (
                        ""
                      )}
                    </div>
                  </div>
                </div>

                {!item.isSample && item.floorArea && (
                  <div className="mt-4  pt-4">
                    <h4 className="font-medium mb-2">
                      Wall Measurements
                    </h4>
                    <div className="grid grid-cols-2 gap-4">
                      {["wallA", "wallB", "wallC", "wallD"].map(
                        (wall) =>
                          item.floorArea[wall] && (
                            <div
                              key={wall}
                              className="bg-white p-3 rounded-lg"
                            >
                              <h5 className="font-medium">
                                Wall {wall.slice(-1)}
                              </h5>
                              <p>
                                Width: {item.floorArea[wall].width || 0}{" "}
                                {item.size?.unit || "feet"}
                              </p>
                              <p>
                                Height:{" "}
                                {item.floorArea[wall].height || 0}{" "}
                                {item.size?.unit || "feet"}
                              </p>
                              <p>
                                Area: {item.floorArea[wall].area || 0}{" "}
                                sq.
                                {item.size?.unit || "feet"}
                              </p>
                              {item.floorArea[wall].color &&
                                item.productType === "Wallpaper" && (
                                  <p className="flex">
                                    Color:{" "}
                                    <input
                                      disabled
                                      type="color"
                                      value={item.floorArea[wall].color}
                                    />
                                  </p>
                                )}
                              {item.productType === "Wallpaper" &&
                                item.floorArea[wall].texture && (
                                  <p className="flex">
                                    Texture:{" "}
                                    {item.floorArea[wall].texture}
                                  </p>
                                )}

                              <p>
                                Price: ₹
                                {(
                                  item.floorArea[wall].price || 0
                                ).toLocaleString("en-IN")}
                              </p>
                            </div>
                          )
                      )}
                    </div>
                  </div>
                )}
              </div>
            ))}

            <div className="lg:border-l border-gray-100 p-5 bg-gray-50">
              <div className="sticky top-6">
                <h3 className="text-xl font-bold mb-4">
                  Order Summary
                </h3>
                <div className="space-y-2 pt-4 border-t text-sm">
                  <div className="flex justify-between text-gray-600">
                    <span>Subtotal</span>
                    <span>₹{totalPrice.toLocaleString("en-IN")}</span>
                  </div>
                  <div className="flex justify-between text-gray-600">
                    <span>Delivery</span>
                    <span>₹ 0(free delivery)</span>
                  </div>
                  <div className="flex justify-between text-gray-600">
                    <span>Tax</span>
                    <span>
                      ₹ {Math.ceil(tax).toLocaleString("en-IN")}
                    </span>
                  </div>

                  <div className="flex justify-between text-xl font-bold pt-4 border-t">
                    <span>Total</span>
                    <span>
                      ₹
                      {Math.ceil(totalPrice + tax).toLocaleString(
                        "en-IN"
                      )}
                    </span>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <button
            onClick={() => {
              if (selectedAddress !== null) {
                setActiveStep(4);
              } else {
                toast.error("Please select a delivery address");
              }
            }}
            className="cursor-pointer w-full py-2 bg-blue-600 text-white rounded-lg mt-4"
          >
            Continue to Payment
          </button>
        </>
      )}
    </div>

    {/* Payment Section */}
    <div
      className={`bg-white rounded-lg p-4 cursor-pointer ${
        activeStep < 4 ? "opacity-50" : ""
      }`}
    >
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center gap-2">
          <span className="w-6 h-6 bg-blue-500 text-white rounded-full flex items-center justify-center text-sm">
            4
          </span>
          <h2 className="font-semibold">PAYMENT OPTIONS</h2>
        </div>
      </div>

      {activeStep === 4 && (
        <div className="space-y-4">
          <div
            className={`flex items-center gap-4 p-4 border rounded-lg cursor-pointer transition-all duration-200 hover:border-blue-300 ${
              paymentMethod === "razorpay"
                ? "border-blue-500 bg-blue-50"
                : "border-gray-200"
            }`}
            onClick={() => setPaymentMethod("razorpay")}
          >
            <div className="p-2 bg-blue-100 rounded-full">
              <CreditCard className="w-6 h-6 text-blue-600" />
            </div>
            <div>
              <h3 className="font-medium text-gray-900">
                Pay with Razorpay
              </h3>
              <p className="text-sm text-gray-600">
                Secure payment via Credit/Debit Card, UPI, or Net
                Banking
              </p>
            </div>
          </div>

          <div
            className={`flex items-center gap-4 p-4 border rounded-lg cursor-pointer transition-all duration-200 hover:border-blue-300 ${
              paymentMethod === "cod"
                ? "border-blue-500 bg-blue-50"
                : "border-gray-200"
            }`}
            onClick={() => setPaymentMethod("cod")}
          >
            <div className="p-2 bg-green-100 rounded-full">
              <Wallet className="w-6 h-6 text-green-600" />
            </div>
            <div>
              <h3 className="font-medium text-gray-900">
                Cash on Delivery
              </h3>
              <p className="text-sm text-gray-600">
                Pay in cash when your order arrives
              </p>
            </div>
          </div>

          <button
            onClick={handlePayment}
            disabled={!paymentMethod || isLoading || flag}
            className={`w-full py-3 cursor-pointer px-4 text-white rounded-lg font-medium transition-all duration-200 ${
              !paymentMethod || isLoading
                ? "bg-gray-400 cursor-not-allowed"
                : "bg-blue-600 hover:bg-blue-700"
            }`}
          >
            {isLoading || flag ? (
              <span className="flex items-center justify-center gap-2">
                Processing... <span className="animate-spin">⌛</span>
              </span>
            ) : paymentMethod === "razorpay" ? (
              `Pay ₹ ${Math.ceil(totalPrice + tax)}`
            ) : (
              "Cash on Delivery"
            )}
          </button>
        </div>
      )}
    </div>
  </div>

  {/* Right Column - Price Details */}
  <div className="lg:w-80 mt-2">
    <div className="bg-white rounded-lg p-4 sticky top-24">
      <h2 className="font-semibold mb-4">PRICE DETAILS</h2>
      <div className="space-y-3">
        <div className="flex justify-between">
          <span>Price ({cartItems.length} items)</span>
          <span>₹{totalPrice.toLocaleString("en-IN")}</span>
        </div>
        <div className="flex justify-between">
          <span>Delivery Charges</span>
          <span className="text-green-600">FREE</span>
        </div>

        <div className="flex justify-between font-semibold pt-3 border-t">
          <span>Order Amount</span>
          <span>₹{Math.ceil(totalPrice).toLocaleString("en-IN")}</span>
        </div>
        <div className="flex justify-between font-semibold pt-3 border-t">
          <span>Total Amount</span>
          <span>
            ₹{Math.ceil(tax + totalPrice).toLocaleString("en-IN")}{" "}
            (inclusion of tax)
          </span>
        </div>
      </div>
    </div>
  </div>
</div>
</div>
